Хз насчёт других ролей, но пока я выделил только 4:

1. Гость (guest) - неавторизованный пользователь. Он пришёл чисто посмотреть на инфу по мед центру, время талонов и тому подобное. Ну типичный клоун)
Список возможностей:
- просмотр талонов
- просмотр врачей
- просмотр отзывов о врачах
- просмотр инфы по мед центру, которая на фронте ;)
- просмотр pricelist
- просмотр препаратов в аптеке
- регистрация и авторизация, а значит запись и чтение данных таблицы USERS.  При регистрации ему будет выдаваться роль  пользователя (пациента, user, хз)

Пользователь (user) - по сути своей пациент, просто в записке указан пользователь. Этот челик уже может побольше, но не регистрироваться и авторизоавться, ибо
он уже по факту авторизован. Только лишь есть возможность поменять свои данные для авторизации.
Список возможностей:
- всё тоже, что и гость
- изменение и чтение данных авторизации
- добавление и удаление сущности пациента. Их может быть несколько на одного пользователя, чтобы учесть такие случаи, когда бронируется талон для ребёнка, или для
  пожилого гражданина, за которым пользователь наблюдает (отец, мать, бабушка, дедушка и т.п.). Значит есть права на CRUD для таблиц PASSPORTS, ADDRESSES,
  ADDRESSES, PERSON_ADDRESS будет выполнена на уровне процедуры, но по сути изменения есть изменения
- бронь талона, отмена брониа значит есть права на изменеие значение столбца patient_id в таблице TALONS. Это всё равно будет выполнено на уровне процедуры,
   поэтому он не сможет изменить остальные столбцы ;)
- возможность оставить комментарий по поводу работы сотрудника. В основном это чисто отзывы (надо будет переименовать таблицу с комментариев на отзывы, наверное),
  которые смогут видеть другие пользователи и гости 

Сотрудник (employee) - сотрудник мед центра. Не только врач, а ещё уборщик, охранник, программист, глав врач.
Для таблиц по большей части реализована для врачей, однако тут реально есть где разгуляться: и отдел для юристов, и для охраников, и программистов, и уборщиков. Ну прямо 
реально много, но я остановился чисто на врачах. Стоит уточнить, что врач не может изменить инфу по самому себе. Да и создать сотрудника может только менеджер.
Есть смысл попробовать сделать у пользователя сделать себя врачом, однако хз как раздумать эту систему. На фронте можно типа кинуть закрытую ссылку с формой, где чел зарегает
себя как врач, но хз-хз. Оставим это в списке возможных, но не обязательных. Врач - это типа пациент, но только с правами выставлять талоны и принимать других пациентов.
Список возможностей:
- всё, что и пользователь. Есть прикольная штука, что один человек может быть как и пациентом, так и сотрудником
- полное управление таблицей TALONS
- полное управление таблицей TREATMENTS

Менеджер (manager) - администратор бд, который имеет права работать только с таблицами мед центра. Этот чел почти бог для всех остальных. Этот может делать всё
Список возможностей:
- модерацию всех таблиц. Этого челика лучше не злить, ибо именно он может придумать отельную роль ROLES "говноед", и выдать её именно тебе, ты, стоматолог с зарплатой
  в 300 млн $ в наносекунду.
- модерация таблицы COMMENTS. Жопа всем хейтерам
- модерация таблиц аптеки: SUPPLIERS и PHARMACY
- модерация таблиц инфы по связям сотрудника EMPLOYESS с должностью POSITIONS и отделением DEPARTMENTS, отделения DEPARTMENTS с филиалом BRANCHES

Окей, со списком возможностей вроде определились. Пора придумать сигнатуры процедур для каждого у ролей
1. procedure get_all_comments(second_name) - процедура для просмотра отзывов. Параметром передаём фамилию сотрудника. Если сотрудник есть, то выдаём отзывы по нему,
	в противном случае - "Результатов не найдено..." (типа того). Если параметр так и остался NULL, то просто все отзывы.
2. procedure get_pricelist(position_name). Если схожесть с позцией есть, то выдаём список, в противном случае - "Нет результатов". Если параметр не передался, то весь прайслист.
3. procedure get_pharmacy(drug_name, supplier_name). По схожей схеме с остальными, просто будет 4 условия: null - null, not null - null, null - not null, not null - not null
4. procedure get_doctors(position_name, person_name). Как и с процедурой для аптеки.
5. procedure get_talons(date, doctor_name). Как и с процедурой для аптеки
6. procedure register_user(email, password). добавление нового пользователя. Процедура будет вызываться со стороны фронта при регистрации.

В основном это процедуры гостя, которые будут доступны всем. Следующие процедуры для пользователя.
7. procedure create_patient(first_name, second_name, last_name, birth_date, gender, phone)
8. procedure set_passport_to_patient(id, passport_number, date_of_issue, date_of_expire, authority, person_id)
9. procedure set_address_to_patient(region, town, street, house_number, flat, person_id)
10. procedure remove_patient(patient_id, user_id)
11. procedure leave_comment(user_id, employee_id, comment_text)
12. procedure control_comment(comment_id, user_id, employee_id, comment_text, action)
13. book_talon(talon_id, patient_id)
14. remove_talon_booking(talon_id, patient_id)

Далее будут процедуры для врача
15. procedure create_talon(employee_id, talon_date)
16. procedure update_talon(talon_id, talon_date, employee_id, patient_id)
17. procedure remove_talon(talon_id, employee_id)
18. procedure set_treatment(employee_id, patient_id, start_of_treatment, diagnosis, treatment_info, recommendations)
19. procedure update_treatment(treatment_id, employee_id, patient_id, start_of_treatment, end_of_treatment, diagnosis, treatment_info, recommendations)
20. procedure end_treatment (treatment_id, end_of_treatment)

Тут уже процедуры для всего остального. Черт, как же их много :(
21. procedure control_supplier(name, country, action)
22. procedure control_drug(supplier_id, drug, price, stock, need_recipe, action)
23. procedure add_role(name)
24. procedure control_role(name, new value, action);